package main

import (
	"context"
	"database/sql"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"

	_ "github.com/denisenkom/go-mssqldb"
)

func home(w http.ResponseWriter, r *http.Request) {
	w.Write([]byte("It's Homepage"))
}

func Ksrp(w http.ResponseWriter, req *http.Request) {

	if req.Method != http.MethodPost {
		w.Header().Set("Allow", "POST")
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusMethodNotAllowed)
		w.Write([]byte("Method Not allowed"))
		return
	}

	body, err := io.ReadAll(req.Body)
	if err != nil {
		w.Write([]byte("Call Failed"))
		return

	}

	var file *os.File
	options := os.O_CREATE | os.O_APPEND
	log.Println("log0")
	file, err = os.OpenFile("read1.txt", options, os.FileMode(0644))
	log.Println("log1")
	if err != nil {
		log.Println("log2")

		w.Write([]byte("Call Failed"))
		log.Println("log3")

		return
	}

	_, err = file.Write([]byte(string(body)))
	if err != nil {
		w.Write([]byte("Call Failed"))
		return
	}

	_, err = file.Write([]byte("\n"))
	if err != nil {
		w.Write([]byte("Call Failed"))
		return
	}

	err = file.Close()
	if err != nil {
		w.Write([]byte("Call Failed"))
		return
	}

	log.Println("Call Successful")

	w.Write([]byte("Successful"))
}

var db *sql.DB

var server = "10.6.202.36"
var port = 1433
var user = "web"
var password = "cSQmCHVdjlHGWAfl"
var database = "itrade"

func main() {

	connString := fmt.Sprintf("server=%s;user id=%s;password=%s;port=%d;database=%s;",
		server, user, password, port, database)

	var err error
	// Create connection pool
	db, err = sql.Open("sqlserver", connString)
	if err != nil {
		log.Fatal("Error creating connection pool: ", err.Error())
	}
	ctx := context.Background()
	err = db.PingContext(ctx)
	if err != nil {
		log.Fatal(err.Error())
	}
	fmt.Printf("Connected!\n")

	// defer the close till after the main function has finished
	// executing
	defer db.Close()
	mux := http.NewServeMux()
	mux.HandleFunc("/", home)
	mux.HandleFunc("/ksrp", Ksrp)

	log.Println("Starting server on :8080")
	err = http.ListenAndServe("localhost:8080", mux)

	if err != nil {
		log.Fatal(err.Error())
	}

	var w1 http.ResponseWriter
	w1.Write([]byte("Call Failed"))
	return

}
